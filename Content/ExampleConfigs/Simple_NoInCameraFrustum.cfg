#####################################################################
# nDisplay demo config file
#
#This Config file will result in 4 render nodes being generated on your local machine, each will
#be 1 window with a resolution of 640x360. The windows are tiled in a 2x2 grid to create 1 image of 
#resolution 1280x720 with an in-camera frustum that can span multiple nodes.
#
#####################################################################

[info] version="23"

######################################################################################################
# Cluster nodes
#********************************************************************
# Cluster node is an application instance. It's allowed to use
# multiple instances on the same PC (as shwon here). Sometimes its necessary. Usually
# application instances run on separate machines.
#
# Properties:
# id       - Unique node name
# addr     - Network address (IPv4 only)
# window   - Window ID
#
# Optional properties:
# master   - Specifies if current node is master; default is 'false'
# port_cs  - Cluster Synchronization port (used by master node only); default is 41001.
# port_ss  - Swap Synchronization port (used by master node only); default is 41002.
# port_ce  - Cluster Events port (used by master node only); default is 41003.
# sound    - turns on/off sound for this application instance; default is 'false'

[cluster_node] id="node_TopLeft" addr="127.0.0.1" window="wnd_TopLeft" master="true" sound="true"
[cluster_node] id="node_TopRight" addr="127.0.0.1" window="wnd_TopRight" 
[cluster_node] id="node_BottomLeft" addr="127.0.0.1" window="wnd_BottomLeft"
[cluster_node] id="node_BottomRight" addr="127.0.0.1" window="wnd_BottomRight"

######################################################################################################
# Application windows
#********************************************************************
# The window entity defines properties of the application's game window.
#
# Properties:
# id         - Unique window name
# viewports  - Array of viewports
#
# Optional properties:
# fullscreen - Fullscreen or windowed mode; default is false - windowed
# winx       - X location
# winy       - Y location
# resx       - Width
# resy       - Height
#
#********************************************************************

[window] id="wnd_TopLeft" viewports="vp_TopLeft" fullscreen="false" WinX="50" WinY="50" ResX="640" ResY="360"
[window] id="wnd_TopRight" viewports="vp_TopRight" fullscreen="false" WinX="690" WinY="50" ResX="640" ResY="360"
[window] id="wnd_BottomLeft" viewports="vp_BottomLeft" fullscreen="false" WinX="50" WinY="410" ResX="640" ResY="360"
[window] id="wnd_BottomRight" viewports="vp_BottomRight" fullscreen="false" WinX="690" WinY="410" ResX="640" ResY="360"


######################################################################################################
# Viewports
#********************************************************************
# Viewport is a rectangle area of game window where a frame is mapped.
# Usually viewports start at 0:0 and have the same size as its parent
# window (single viewport rendering). However, in some cases multiple
# viewports required.
#
# Properties:
# id     - Unique viewport name
# x      - X coordinate of viewport's top left corner on a window
# y      - Y coordinate of viewport's top left corner on a window
# width  - Width of viewport in pixels
# height - Height of viewport in pixels
#
# Optional properties:
# camera - Cammera assigned to this viewport
#********************************************************************

[viewport] id="vp_TopLeft"  x="0" y="0" width="640" height="360" projection="proj_warp_tl"
[viewport] id="vp_TopRight" x="0" y="0" width="640" height="360" projection="proj_warp_tr"
[viewport] id="vp_BottomLeft" x="0" y="0" width="640" height="360" projection="proj_warp_bl"
[viewport] id="vp_BottomRight" x="0" y="0" width="640" height="360" projection="proj_warp_br"


######################################################################################################
# Projection policies
#********************************************************************
# Projection policy is an abstraction which knows where to take an
# projection input data and how to compute the output. This means
# that each policy might have it's own properties that it knows how
# to interpret and utilize. There are several projection policies
# available natively: simple, MPCDI and EasyBlend:
#
# * Simple  - This one is the native projection policy that can be fully
#             configured from the config file. All you need is to specify
#             a projection screen. Note that this projection policy cannot
#			  be used with an inner frustum
#
# * MPCDI   - This policy allows to use an industry standard for multi-
#             projector setups. It requires a special .mpcdi file that
#             contains all the data required for computations.
#
# * Picp_Mesh - This policy bases the projection on meshes representing
#			    the LED wall screens. The meshes must be specified in the
#			    warp_monitor BP in Unreal. We will be using this policy
#				for our in-camera setup.
#
# * EasyBlend - This policy is an implementation of the EasyBLend SDK
#               provided by Scalable Display Technologies. It requires
#               a bunch of special files that describe a multi-projector
#               system.
#
# * Camera	 - This policy is used when a viwport is based on a moving 
#			   camera in engine. In-Camera inner frustums use this policy
#
# Properties:
# id     - Unique projection policy name
# type   - Projection policy type (custom types can be used)
#********************************************************************

[projection] id="proj_warp_tl"      type="picp_mesh"
[projection] id="proj_warp_tr"		type="picp_mesh"
[projection] id="proj_warp_bl"		type="picp_mesh"
[projection] id="proj_warp_br"		type="picp_mesh"


######################################################################################################
# Cameras
#********************************************************************
# Camera is a predefined point frome where the stereoscopic view built.
# It's possible to define multiple cameras and swith the active one
# during runtime. You're free to attach any camera to a tracking device
# for head tracking. Consider a camera as a viewer's head.
#
# Properties:
# id  - unique camera name
# loc - relative location to the parent component. Location is relative
#       to the VR root if no parent specified.
# rot - relative rotation to the parent component. Rotation is relative
#       to the VR root if no parent specified.
#
# Optional properties:
# parent       - ID of parent component in VR hierarchy; default is VR root.
# tracker_id   - ID of tracking device; no tracking by default.
# tracker_ch   - ID of tracking device's channel; no tracking by default.
# eye_swap     - Swap eyes for this camera in stereo mode; default is 'false'
# eye_dist     - interoccular distance in meters for stereo/force_offset modes.
#                Default is 0.064.
# force_offset - Force monoscopic camera to behave like a left/right eye
#                of a stereoscopic camera. Eye_offset is applicable in this case.
#********************************************************************

[camera] id="camera_static" loc="X=0,Y=0,Z=0"

######################################################################################################
# General settings
#********************************************************************
# Properties:
# swap_sync_policy - swap synchronization policy
#                  - 0 - no synchronization
#                  - 1 - software swap synchronization
#                  - 2 - NV swap lock (Nvidia Quadro and Quadro Sync cards required)

[general] swap_sync_policy="1"

######################################################################################################
# Network settings
#********************************************************************
# Optional properties:
# cln_conn_tries_amount - how many times a client tries to connect to a server; default is 10
# cln_conn_retry_delay  - delay before next client connection try (milliseconds); default is 1000
# game_start_timeout    - timeout before all data is loaded and game started (milliseconds); default is 30000
# barrier_wait_timeout  - barrier timeout for both game and render threads (milliseconds); default is 5000

[network] cln_conn_tries_amount="10" cln_conn_retry_delay="1000" game_start_timeout="30000" barrier_wait_timeout="5000"

